namespace Glitch\Grammar;

use Glitch\Grammar\Tree\ActionNode;
use Glitch\Grammar\Tree\AddListenerNode;
use Glitch\Grammar\Tree\AssignmentNode;
use Glitch\Grammar\Tree\EventDefinitionNode;
use Glitch\Grammar\Tree\FireNode;
use Glitch\Grammar\Tree\ProgramNode;
use Glitch\Grammar\Tree\ReferenceNode;
use Glitch\Grammar\Tree\RemoveListenerNode;
use Glitch\Grammar\Tree\StringNode;

grammar GlitchFile
{
    start Program = statements:StatementList _ { return new ProgramNode($statements); };
    
    Statement = EventDefinitionStatement / AssignmentStatement / FireStatement / AddListenerStatement / RemoveListenerStatement;

    EventDefinitionStatement = "*" _ names:IdentifierList _ ";" { return new EventDefinitionNode($names); };
    AssignmentStatement = left:Expression _ ":=" _ right:Expression _ ";" { return new AssignmentNode($left, $right); };
    FireStatement = left:Expression _ "!" _ right:Expression _ ";" { return new FireNode($left, $right); };
    AddListenerStatement = left:Expression _ "+=" _ right:Expression _ ";" { return new AddListenerNode($left, $right); };
    RemoveListenerStatement = left:Expression _ "-=" _ right:Expression _ ";" { return new RemoveListenerNode($left, $right); };

    Expression = ActionLiteral / ReferenceExpression / StringLiteral;

    ReferenceExpression = value:Identifier { return new ReferenceNode($value); };
    StringLiteral = value:$("\"" ([^\\"] / "\\" .)* "\"") { return new StringNode($value); };
    ActionLiteral = parameters:ParameterList _ "=>" _ "{" statements:StatementList _ "}" { return new ActionNode($parameters, $statements); };

    _ = [\r\t\n ]*;
    Identifier = $([A-Za-z_] [A-Za-z0-9_]*);
    StatementList = (_ statement:Statement { return $statement; })*;
    ParameterList = (parameter:Identifier { return [$parameter]; });
    IdentifierList = first:Identifier rest:(_ "," _ next:Identifier { return $next; })* { return array_merge([$first], $rest); };
}

