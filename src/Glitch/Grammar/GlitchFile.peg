namespace Glitch\Grammar;

use Glitch\Grammar\Tree\ActionNode;
use Glitch\Grammar\Tree\AddListenerNode;
use Glitch\Grammar\Tree\AssignmentNode;
use Glitch\Grammar\Tree\CallNode;
use Glitch\Grammar\Tree\EventDefinitionNode;
use Glitch\Grammar\Tree\FireNode;
use Glitch\Grammar\Tree\FunctionNode;
use Glitch\Grammar\Tree\ProgramNode;
use Glitch\Grammar\Tree\ReferenceNode;
use Glitch\Grammar\Tree\RemoveListenerNode;
use Glitch\Grammar\Tree\StringNode;

grammar GlitchFile
{
    start Program = statements:StatementList _ { return new ProgramNode($statements); };
    
    Statement = EventDefinitionStatement
              / AssignmentStatement
              / FireStatement
              / AddListenerStatement
              / RemoveListenerStatement;

    EventDefinitionStatement = "*" _ names:IdentifierList _ ";" { return new EventDefinitionNode($names); };
    AssignmentStatement = left:Expression _ ":=" _ right:Expression _ ";" { return new AssignmentNode($left, $right); };
    FireStatement = left:Expression _ "!" _ right:ArgumentList _ ";" { return new FireNode($left, $right); };
    AddListenerStatement = left:Expression _ "+=" _ right:Expression _ ";" { return new AddListenerNode($left, $right); };
    RemoveListenerStatement = left:Expression _ "-=" _ right:Expression _ ";" { return new RemoveListenerNode($left, $right); };

    Expression = ActionLiteral
               / FunctionLiteral
               / CallExpression
               / PrimaryExpression;

    PrimaryExpression = StringLiteral
                      / ReferenceExpression;

    ReferenceExpression = value:Identifier { return new ReferenceNode($value); };
    CallExpression = left:PrimaryExpression _ "(" _ ")" { return new CallNode($left, []); }
                   / left:PrimaryExpression _ "(" _ right:ExpressionList _ ")" { return new CallNode($left, $right); };
    StringLiteral = value:$("\"" ([^\\"] / "\\" .)* "\"") { return new StringNode($value); };
    ActionLiteral = parameters:ParameterList _ "=>" _ "{" statements:StatementList _ "}" { return new ActionNode($parameters, $statements); };
    FunctionLiteral = parameters:ParameterList _ "->" _ expression:Expression { return new FunctionNode($parameters, $expression); };

    _ = [\r\t\n ]*;
    Identifier = $([A-Za-z_] [A-Za-z0-9_]*);
    StatementList = (_ statement:Statement { return $statement; })*;
    ParameterList = parameter:Identifier { return [$parameter]; }
                  / "(" _ ")" { return []; }
                  / "(" _ parameters:IdentifierList _ ")" { return $parameters; };
    ArgumentList = argument:Expression { return [$argument]; }
                 / "(" _ ")" { return []; }
                 / "(" _ arguments:ExpressionList _ ")" { return $arguments; };
    IdentifierList = first:Identifier rest:(_ "," _ next:Identifier { return $next; })* { return array_merge([$first], $rest); };
    ExpressionList = first:Expression rest:(_ "," _ next:Expression { return $next; })* { return array_merge([$first], $rest); };
}

